1. 概述
　　将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。

2. 建造者模式中的角色

　　2.1 建造者（Builder）：为创建一个产品对象的各个部件指定抽象接口。
　　2.2 具体建造者（ConcreteBuilder）：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并 提供一个检索产品的接口。
　　2.3 指挥者（Director）：指挥并构造一个使用Builder接口的对象。Builder按规定流程生产product。 
　　2.4 产品（Product）：表示被构造的复杂对象。ConcreteBuilder创建该产品的零部件，待Director组合。

3. 实例：创建一个人，这个人可以有不同的特点，可以是胖子，可以是瘦子，可以是高个子，也可以是矮个子。

4. 模式总结

　　4.1 优点

　　　　4.1.1 用户只需要指定要建造的类型就可以得到它们，而具体的建造过程和细节不需要知道。
　　　　4.1.2 建造代码与表示相分离，如果要改变一个产品的内部表示，只要再定义一个新的具体的建造者就可以了。
　　　　4.1.3 建造过程由指挥者来控制，建造细节由一个抽象类来控制，对于实现建造细节的具体类来说，不会遗漏某一个步骤。

　　4.2 缺点

　　　　以上例子说明，现在我要增加产品的一个细节，如把创建脚的过程也添加进来，看我们需要改哪些类。
	   Buider,FatPersonBuilder,ThinPersonBuilder（甚至更多，如果你实现了TallPersonBuilder,ShortPersonBuilder等),PersonDirector，我们对修改也就开放了。

　　4.3 实用范围
　　　　4.3.1 当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。

　　　　4.3.2 当复杂对象的部件相对稳定，不会发生变化时