1.　概述
　　抽象工厂模式为一个产品家族提供了统一的创建接口。当需要这个产品家族的某一系列的时候，可以从抽象工厂中选出相对应的系列来创建一个具体的工厂类别。

2.　抽象工厂模式中的角色

 　　2.1 抽象工厂（AbstractFactory）：担任这个角色的是工厂方法模式的核心，它是与应用系统商业逻辑无关的。

 　　2.2 具体工厂（ConcreteFactory）：这个角色直接在客户端的调用下创建产品的实例。这个角色含有选择合适的产品对象的逻辑，而这个逻辑是与应用系统的商业逻辑紧密相关的。

 　　2.3 抽象产品（AbstractProduct）：担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。

 　　2.4 具体产品（ConcreteProduct）：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。这是客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。

3.　实例：更换数据库。现有系统使用的是SqlServer数据库，它的Licence是付费的，有的客户想使用免费的数据库服务，如Access。有的客户拥有其它数据库服务商的Licence，他们也不想使用还要另付费的SqlServer。

 　　3.1 解决这个问题的根本是将应用程序与数据库解耦，使得应用程序不再依赖某一个具体的数据库。抽象工厂给我们提供了解决方案。
 
 4.　模式总结

　　4.1 优点
　　　　4.1.1 具体产品从客户代码中被分离出来
　　　　4.1.2 容易改变产品的系列（如SqlServer产品系列，Access产品系列）
　　　　4.1.3 将一个系列的产品族统一到一起创建

　　4.2 缺点
　　　　在产品族中扩展新的产品是很困难的，它需要修改抽象工厂的接口，如增加一种产品Customer变得非常困难。

　　4.3 实用范围
　　　　4.3.1 一个系统要独立于它的产品的创建、组合和表示时。
　　　　4.3.2 一个系统要由多个产品系列中的一个来配置时。
　　　　4.3.3 当你要强调一系列相关的产品对象的设计以便进行联合使用时。
　　　　4.3.4 当你提供一个产品类库，而只想显示它们的接口而不是实现时。